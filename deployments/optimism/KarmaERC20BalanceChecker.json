{
  "address": "0xb56037DA2a1CAF4681451f7c5727dd1205CFFf92",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "users",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "bulkBalance",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "singleBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xf77d6b9e334e8d8e736c2c6306e0c494eb75aa77ca29ac32530d7b7f54299c46",
  "receipt": {
    "to": null,
    "from": "0xf768f5F340e89698465Fc7C12F31cB485fFf98D2",
    "contractAddress": "0xb56037DA2a1CAF4681451f7c5727dd1205CFFf92",
    "transactionIndex": 0,
    "gasUsed": "294171",
    "logsBloom": "0x
    "blockHash": "0xa96d528593c6601d43714e4dfc3db3acde294a5f622044780982d98c447aef77",
    "transactionHash": "0xf77d6b9e334e8d8e736c2c6306e0c494eb75aa77ca29ac32530d7b7f54299c46",
    "logs": [],
    "blockNumber": 88647974,
    "cumulativeGasUsed": "294171",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "65e7e6648556a4e22ff16e2934d0d80e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.2+commit.661d1103\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"bulkBalance\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"singleBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/KarmaERC20BalanceChecker.sol\":\"KarmaERC20BalanceChecker\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"contracts/KarmaERC20BalanceChecker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract KarmaERC20BalanceChecker {\\n\\n  function singleBalance(address user, address token) public view returns (uint256) {\\n    if (token == address(0)) {\\n      return user.balance;\\n    }\\n    uint256 tokenCode;\\n    assembly { tokenCode := extcodesize(token) }\\n    if (tokenCode == 0) {\\n      return 0;\\n    }\\n    try IERC20(token).balanceOf(user) returns (uint256 balance) {\\n      return balance;\\n    } catch {\\n      return 0;\\n    }\\n  }\\n\\n  function bulkBalance(address[] memory users, address token) external view returns (uint256[] memory) {\\n      uint256[] memory addrBalances = new uint256[](users.length);\\n      for (uint256 i = 0; i < users.length; i++) {\\n          addrBalances[i] = singleBalance(users[i], token);\\n      }\\n      return addrBalances;\\n  }\\n}\\n\\n\",\"keccak256\":\"0x08ecabb651e085b365c07de2b4f25113c92d09df6d90311d0cc4ed815e78966c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061045d806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80630c9d340b1461003b5780631aafae6b14610064575b600080fd5b61004e6100493660046102b6565b610085565b60405161005b91906103a6565b60405180910390f35b610077610072366004610284565b610161565b60405190815260200161005b565b60606000835167ffffffffffffffff8111156100b157634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156100da578160200160208202803683370190505b50905060005b84518110156101575761011a85828151811061010c57634e487b7160e01b600052603260045260246000fd5b602002602001015185610161565b82828151811061013a57634e487b7160e01b600052603260045260246000fd5b60209081029190910101528061014f816103ea565b9150506100e0565b5090505b92915050565b600073ffffffffffffffffffffffffffffffffffffffff821661019c575073ffffffffffffffffffffffffffffffffffffffff82163161015b565b813b806101ad57600091505061015b565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85811660048301528416906370a082319060240160206040518083038186803b15801561021457600080fd5b505afa925050508015610244575060408051601f3d908101601f191682019092526102419181019061038e565b60015b61025257600091505061015b565b915061015b9050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461027f57600080fd5b919050565b60008060408385031215610296578182fd5b61029f8361025b565b91506102ad6020840161025b565b90509250929050565b600080604083850312156102c8578182fd5b823567ffffffffffffffff808211156102df578384fd5b818501915085601f8301126102f2578384fd5b813560208282111561030657610306610411565b808202604051601f19603f8301168101818110868211171561032a5761032a610411565b604052838152828101945085830182870184018b1015610348578889fd5b8896505b848710156103715761035d8161025b565b86526001969096019594830194830161034c565b509650610381905087820161025b565b9450505050509250929050565b60006020828403121561039f578081fd5b5051919050565b6020808252825182820181905260009190848201906040850190845b818110156103de578351835292840192918401916001016103c2565b50909695505050505050565b600060001982141561040a57634e487b7160e01b81526011600452602481fd5b5060010190565b634e487b7160e01b600052604160045260246000fdfea2646970667358221220ef8f10cedfa2892f2c631fa5cb5e257298eca06758396865936f04017d5ea80564736f6c63430008020033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c80630c9d340b1461003b5780631aafae6b14610064575b600080fd5b61004e6100493660046102b6565b610085565b60405161005b91906103a6565b60405180910390f35b610077610072366004610284565b610161565b60405190815260200161005b565b60606000835167ffffffffffffffff8111156100b157634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156100da578160200160208202803683370190505b50905060005b84518110156101575761011a85828151811061010c57634e487b7160e01b600052603260045260246000fd5b602002602001015185610161565b82828151811061013a57634e487b7160e01b600052603260045260246000fd5b60209081029190910101528061014f816103ea565b9150506100e0565b5090505b92915050565b600073ffffffffffffffffffffffffffffffffffffffff821661019c575073ffffffffffffffffffffffffffffffffffffffff82163161015b565b813b806101ad57600091505061015b565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85811660048301528416906370a082319060240160206040518083038186803b15801561021457600080fd5b505afa925050508015610244575060408051601f3d908101601f191682019092526102419181019061038e565b60015b61025257600091505061015b565b915061015b9050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461027f57600080fd5b919050565b60008060408385031215610296578182fd5b61029f8361025b565b91506102ad6020840161025b565b90509250929050565b600080604083850312156102c8578182fd5b823567ffffffffffffffff808211156102df578384fd5b818501915085601f8301126102f2578384fd5b813560208282111561030657610306610411565b808202604051601f19603f8301168101818110868211171561032a5761032a610411565b604052838152828101945085830182870184018b1015610348578889fd5b8896505b848710156103715761035d8161025b565b86526001969096019594830194830161034c565b509650610381905087820161025b565b9450505050509250929050565b60006020828403121561039f578081fd5b5051919050565b6020808252825182820181905260009190848201906040850190845b818110156103de578351835292840192918401916001016103c2565b50909695505050505050565b600060001982141561040a57634e487b7160e01b81526011600452602481fd5b5060010190565b634e487b7160e01b600052604160045260246000fdfea2646970667358221220ef8f10cedfa2892f2c631fa5cb5e257298eca06758396865936f04017d5ea80564736f6c63430008020033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}