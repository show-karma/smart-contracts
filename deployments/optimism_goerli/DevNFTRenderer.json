{
  "address": "0xB360207b3FdB04f931ABE4490bb0D62A2438d3DE",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_schemaResolver",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "_githubResolver",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "_owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenOwner",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "nftName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "repository",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "formatTokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "prCount",
          "type": "uint256"
        }
      ],
      "name": "generateAvatar",
      "outputs": [
        {
          "internalType": "string",
          "name": "svg",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "prCount",
          "type": "uint256"
        }
      ],
      "name": "generateAvatarChain",
      "outputs": [
        {
          "internalType": "string",
          "name": "svg",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "prCount",
          "type": "uint256"
        }
      ],
      "name": "generateBackground",
      "outputs": [
        {
          "internalType": "string",
          "name": "svg",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "username",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "prCount",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "repository",
          "type": "string"
        }
      ],
      "name": "generateCard",
      "outputs": [
        {
          "internalType": "string",
          "name": "svg",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "githubResolver",
      "outputs": [
        {
          "internalType": "contract GithubLinkResolver",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenOwner",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "repository",
          "type": "string"
        }
      ],
      "name": "imageURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenOwner",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "repository",
          "type": "string"
        }
      ],
      "name": "isEligibleToMint",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nftCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "schemaResolver",
      "outputs": [
        {
          "internalType": "contract DevSchemaResolver",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xbc737bec8910b1b2f85c0281fb96e0cad8fb12867d1f4bdc3e50dc81728f8add",
  "receipt": {
    "to": null,
    "from": "0x5A4830885f12438E00D8f4d98e9Fe083e707698C",
    "contractAddress": "0xB360207b3FdB04f931ABE4490bb0D62A2438d3DE",
    "transactionIndex": 1,
    "gasUsed": "2824645",
    "logsBloom": "0x
    "blockHash": "0x402c66034ff3175acb3301413f1413ef9aa94ce9e987b09b620b56c407a357df",
    "transactionHash": "0xbc737bec8910b1b2f85c0281fb96e0cad8fb12867d1f4bdc3e50dc81728f8add",
    "logs": [],
    "blockNumber": 15904530,
    "cumulativeGasUsed": "2888610",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x47Fc0eB55A0Be616Fd68E4d99cff6304457dFA69",
    "0x088D11816A414015333c338dEE0644aA69a338B4"
  ],
  "solcInputHash": "844570a6f7ff10ead53c08f59bc87001",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_schemaResolver\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_githubResolver\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"nftName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"repository\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"formatTokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"prCount\",\"type\":\"uint256\"}],\"name\":\"generateAvatar\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"svg\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"prCount\",\"type\":\"uint256\"}],\"name\":\"generateAvatarChain\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"svg\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"prCount\",\"type\":\"uint256\"}],\"name\":\"generateBackground\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"svg\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"username\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"prCount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"repository\",\"type\":\"string\"}],\"name\":\"generateCard\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"svg\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"githubResolver\",\"outputs\":[{\"internalType\":\"contract GithubLinkResolver\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"repository\",\"type\":\"string\"}],\"name\":\"imageURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"repository\",\"type\":\"string\"}],\"name\":\"isEligibleToMint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"schemaResolver\",\"outputs\":[{\"internalType\":\"contract DevSchemaResolver\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/dynamic-nft/DevNFTRenderer.sol\":\"DevNFTRenderer\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@ethereum-attestation-service/eas-contracts/contracts/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// A representation of an empty/uninitialized UID.\\nbytes32 constant EMPTY_UID = 0;\\n\\n// A zero expiration represents an non-expiring attestation.\\nuint64 constant NO_EXPIRATION_TIME = 0;\\n\\nerror AccessDenied();\\nerror InvalidEAS();\\nerror InvalidLength();\\nerror InvalidSignature();\\nerror NotFound();\\n\\n/**\\n * @dev A struct representing EIP712 signature data.\\n */\\nstruct EIP712Signature {\\n    uint8 v; // The recovery ID.\\n    bytes32 r; // The x-coordinate of the nonce R.\\n    bytes32 s; // The signature data.\\n}\\n\\n/**\\n * @dev A struct representing a single attestation.\\n */\\nstruct Attestation {\\n    bytes32 uid; // A unique identifier of the attestation.\\n    bytes32 schema; // The unique identifier of the schema.\\n    uint64 time; // The time when the attestation was created (Unix timestamp).\\n    uint64 expirationTime; // The time when the attestation expires (Unix timestamp).\\n    uint64 revocationTime; // The time when the attestation was revoked (Unix timestamp).\\n    bytes32 refUID; // The UID of the related attestation.\\n    address recipient; // The recipient of the attestation.\\n    address attester; // The attester/sender of the attestation.\\n    bool revocable; // Whether the attestation is revocable.\\n    bytes data; // Custom attestation data.\\n}\\n\\n/**\\n * @dev A helper function to work with unchecked iterators in loops.\\n */\\nfunction uncheckedInc(uint256 i) pure returns (uint256 j) {\\n    unchecked {\\n        j = i + 1;\\n    }\\n}\\n\",\"keccak256\":\"0x4bab9ec76bdb009e9fb505c45a679d39c9e80771eb13ed901029a1068025752a\",\"license\":\"MIT\"},\"@ethereum-attestation-service/eas-contracts/contracts/IEAS.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { ISchemaRegistry } from \\\"./ISchemaRegistry.sol\\\";\\nimport { Attestation, EIP712Signature } from \\\"./Common.sol\\\";\\n\\n/**\\n * @dev A struct representing the arguments of the attestation request.\\n */\\nstruct AttestationRequestData {\\n    address recipient; // The recipient of the attestation.\\n    uint64 expirationTime; // The time when the attestation expires (Unix timestamp).\\n    bool revocable; // Whether the attestation is revocable.\\n    bytes32 refUID; // The UID of the related attestation.\\n    bytes data; // Custom attestation data.\\n    uint256 value; // An explicit ETH amount to send to the resolver. This is important to prevent accidental user errors.\\n}\\n\\n/**\\n * @dev A struct representing the full arguments of the attestation request.\\n */\\nstruct AttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData data; // The arguments of the attestation request.\\n}\\n\\n/**\\n * @dev A struct representing the full arguments of the full delegated attestation request.\\n */\\nstruct DelegatedAttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData data; // The arguments of the attestation request.\\n    EIP712Signature signature; // The EIP712 signature data.\\n    address attester; // The attesting account.\\n}\\n\\n/**\\n * @dev A struct representing the full arguments of the multi attestation request.\\n */\\nstruct MultiAttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData[] data; // The arguments of the attestation request.\\n}\\n\\n/**\\n * @dev A struct representing the full arguments of the delegated multi attestation request.\\n */\\nstruct MultiDelegatedAttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData[] data; // The arguments of the attestation requests.\\n    EIP712Signature[] signatures; // The EIP712 signatures data. Please note that the signatures are assumed to be signed with increasing nonces.\\n    address attester; // The attesting account.\\n}\\n\\n/**\\n * @dev A struct representing the arguments of the revocation request.\\n */\\nstruct RevocationRequestData {\\n    bytes32 uid; // The UID of the attestation to revoke.\\n    uint256 value; // An explicit ETH amount to send to the resolver. This is important to prevent accidental user errors.\\n}\\n\\n/**\\n * @dev A struct representing the full arguments of the revocation request.\\n */\\nstruct RevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData data; // The arguments of the revocation request.\\n}\\n\\n/**\\n * @dev A struct representing the arguments of the full delegated revocation request.\\n */\\nstruct DelegatedRevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData data; // The arguments of the revocation request.\\n    EIP712Signature signature; // The EIP712 signature data.\\n    address revoker; // The revoking account.\\n}\\n\\n/**\\n * @dev A struct representing the full arguments of the multi revocation request.\\n */\\nstruct MultiRevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData[] data; // The arguments of the revocation request.\\n}\\n\\n/**\\n * @dev A struct representing the full arguments of the delegated multi revocation request.\\n */\\nstruct MultiDelegatedRevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData[] data; // The arguments of the revocation requests.\\n    EIP712Signature[] signatures; // The EIP712 signatures data. Please note that the signatures are assumed to be signed with increasing nonces.\\n    address revoker; // The revoking account.\\n}\\n\\n/**\\n * @title EAS - Ethereum Attestation Service interface.\\n */\\ninterface IEAS {\\n    /**\\n     * @dev Emitted when an attestation has been made.\\n     *\\n     * @param recipient The recipient of the attestation.\\n     * @param attester The attesting account.\\n     * @param uid The UID the revoked attestation.\\n     * @param schema The UID of the schema.\\n     */\\n    event Attested(address indexed recipient, address indexed attester, bytes32 uid, bytes32 indexed schema);\\n\\n    /**\\n     * @dev Emitted when an attestation has been revoked.\\n     *\\n     * @param recipient The recipient of the attestation.\\n     * @param attester The attesting account.\\n     * @param schema The UID of the schema.\\n     * @param uid The UID the revoked attestation.\\n     */\\n    event Revoked(address indexed recipient, address indexed attester, bytes32 uid, bytes32 indexed schema);\\n\\n    /**\\n     * @dev Emitted when a data has been timestamped.\\n     *\\n     * @param data The data.\\n     * @param timestamp The timestamp.\\n     */\\n    event Timestamped(bytes32 indexed data, uint64 indexed timestamp);\\n\\n    /**\\n     * @dev Emitted when a data has been revoked.\\n     *\\n     * @param revoker The address of the revoker.\\n     * @param data The data.\\n     * @param timestamp The timestamp.\\n     */\\n    event RevokedOffchain(address indexed revoker, bytes32 indexed data, uint64 indexed timestamp);\\n\\n    /**\\n     * @dev Returns the address of the global schema registry.\\n     *\\n     * @return The address of the global schema registry.\\n     */\\n    function getSchemaRegistry() external view returns (ISchemaRegistry);\\n\\n    /**\\n     * @dev Attests to a specific schema.\\n     *\\n     * @param request The arguments of the attestation request.\\n     *\\n     * Example:\\n     *\\n     * attest({\\n     *     schema: \\\"0facc36681cbe2456019c1b0d1e7bedd6d1d40f6f324bf3dd3a4cef2999200a0\\\",\\n     *     data: {\\n     *         recipient: \\\"0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf\\\",\\n     *         expirationTime: 0,\\n     *         revocable: true,\\n     *         refUID: \\\"0x0000000000000000000000000000000000000000000000000000000000000000\\\",\\n     *         data: \\\"0xF00D\\\",\\n     *         value: 0\\n     *     }\\n     * })\\n     *\\n     * @return The UID of the new attestation.\\n     */\\n    function attest(AttestationRequest calldata request) external payable returns (bytes32);\\n\\n    /**\\n     * @dev Attests to a specific schema via the provided EIP712 signature.\\n     *\\n     * @param delegatedRequest The arguments of the delegated attestation request.\\n     *\\n     * Example:\\n     *\\n     * attestByDelegation({\\n     *     schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n     *     data: {\\n     *         recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\\n     *         expirationTime: 1673891048,\\n     *         revocable: true,\\n     *         refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n     *         data: '0x1234',\\n     *         value: 0\\n     *     },\\n     *     signature: {\\n     *         v: 28,\\n     *         r: '0x148c...b25b',\\n     *         s: '0x5a72...be22'\\n     *     },\\n     *     attester: '0xc5E8740aD971409492b1A63Db8d83025e0Fc427e'\\n     * })\\n     *\\n     * @return The UID of the new attestation.\\n     */\\n    function attestByDelegation(\\n        DelegatedAttestationRequest calldata delegatedRequest\\n    ) external payable returns (bytes32);\\n\\n    /**\\n     * @dev Attests to multiple schemas.\\n     *\\n     * @param multiRequests The arguments of the multi attestation requests. The requests should be grouped by distinct\\n     * schema ids to benefit from the best batching optimization.\\n     *\\n     * Example:\\n     *\\n     * multiAttest([{\\n     *     schema: '0x33e9094830a5cba5554d1954310e4fbed2ef5f859ec1404619adea4207f391fd',\\n     *     data: [{\\n     *         recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\\n     *         expirationTime: 1673891048,\\n     *         revocable: true,\\n     *         refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n     *         data: '0x1234',\\n     *         value: 1000\\n     *     },\\n     *     {\\n     *         recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\\n     *         expirationTime: 0,\\n     *         revocable: false,\\n     *         refUID: '0x480df4a039efc31b11bfdf491b383ca138b6bde160988222a2a3509c02cee174',\\n     *         data: '0x00',\\n     *         value: 0\\n     *     }],\\n     * },\\n     * {\\n     *     schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',\\n     *     data: [{\\n     *         recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\\n     *         expirationTime: 0,\\n     *         revocable: true,\\n     *         refUID: '0x75bf2ed8dca25a8190c50c52db136664de25b2449535839008ccfdab469b214f',\\n     *         data: '0x12345678',\\n     *         value: 0\\n     *     },\\n     * }])\\n     *\\n     * @return The UIDs of the new attestations.\\n     */\\n    function multiAttest(MultiAttestationRequest[] calldata multiRequests) external payable returns (bytes32[] memory);\\n\\n    /**\\n     * @dev Attests to multiple schemas using via provided EIP712 signatures.\\n     *\\n     * @param multiDelegatedRequests The arguments of the delegated multi attestation requests. The requests should be\\n     * grouped by distinct schema ids to benefit from the best batching optimization.\\n     *\\n     * Example:\\n     *\\n     * multiAttestByDelegation([{\\n     *     schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n     *     data: [{\\n     *         recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\\n     *         expirationTime: 1673891048,\\n     *         revocable: true,\\n     *         refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n     *         data: '0x1234',\\n     *         value: 0\\n     *     },\\n     *     {\\n     *         recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\\n     *         expirationTime: 0,\\n     *         revocable: false,\\n     *         refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n     *         data: '0x00',\\n     *         value: 0\\n     *     }],\\n     *     signatures: [{\\n     *         v: 28,\\n     *         r: '0x148c...b25b',\\n     *         s: '0x5a72...be22'\\n     *     },\\n     *     {\\n     *         v: 28,\\n     *         r: '0x487s...67bb',\\n     *         s: '0x12ad...2366'\\n     *     }],\\n     *     attester: '0x1D86495b2A7B524D747d2839b3C645Bed32e8CF4'\\n     * }])\\n     *\\n     * @return The UIDs of the new attestations.\\n     */\\n    function multiAttestByDelegation(\\n        MultiDelegatedAttestationRequest[] calldata multiDelegatedRequests\\n    ) external payable returns (bytes32[] memory);\\n\\n    /**\\n     * @dev Revokes an existing attestation to a specific schema.\\n     *\\n     * Example:\\n     *\\n     * revoke({\\n     *     schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n     *     data: {\\n     *         uid: '0x101032e487642ee04ee17049f99a70590c735b8614079fc9275f9dd57c00966d',\\n     *         value: 0\\n     *     }\\n     * })\\n     *\\n     * @param request The arguments of the revocation request.\\n     */\\n    function revoke(RevocationRequest calldata request) external payable;\\n\\n    /**\\n     * @dev Revokes an existing attestation to a specific schema via the provided EIP712 signature.\\n     *\\n     * Example:\\n     *\\n     * revokeByDelegation({\\n     *     schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n     *     data: {\\n     *         uid: '0xcbbc12102578c642a0f7b34fe7111e41afa25683b6cd7b5a14caf90fa14d24ba',\\n     *         value: 0\\n     *     },\\n     *     signature: {\\n     *         v: 27,\\n     *         r: '0xb593...7142',\\n     *         s: '0x0f5b...2cce'\\n     *     },\\n     *     revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992'\\n     * })\\n     *\\n     * @param delegatedRequest The arguments of the delegated revocation request.\\n     */\\n    function revokeByDelegation(DelegatedRevocationRequest calldata delegatedRequest) external payable;\\n\\n    /**\\n     * @dev Revokes existing attestations to multiple schemas.\\n     *\\n     * @param multiRequests The arguments of the multi revocation requests. The requests should be grouped by distinct\\n     * schema ids to benefit from the best batching optimization.\\n     *\\n     * Example:\\n     *\\n     * multiRevoke([{\\n     *     schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n     *     data: [{\\n     *         uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',\\n     *         value: 1000\\n     *     },\\n     *     {\\n     *         uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',\\n     *         value: 0\\n     *     }],\\n     * },\\n     * {\\n     *     schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',\\n     *     data: [{\\n     *         uid: '0x053d42abce1fd7c8fcddfae21845ad34dae287b2c326220b03ba241bc5a8f019',\\n     *         value: 0\\n     *     },\\n     * }])\\n     */\\n    function multiRevoke(MultiRevocationRequest[] calldata multiRequests) external payable;\\n\\n    /**\\n     * @dev Revokes existing attestations to multiple schemas via provided EIP712 signatures.\\n     *\\n     * @param multiDelegatedRequests The arguments of the delegated multi revocation attestation requests. The requests should be\\n     * grouped by distinct schema ids to benefit from the best batching optimization.\\n     *\\n     * Example:\\n     *\\n     * multiRevokeByDelegation([{\\n     *     schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n     *     data: [{\\n     *         uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',\\n     *         value: 1000\\n     *     },\\n     *     {\\n     *         uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',\\n     *         value: 0\\n     *     }],\\n     *     signatures: [{\\n     *         v: 28,\\n     *         r: '0x148c...b25b',\\n     *         s: '0x5a72...be22'\\n     *     },\\n     *     {\\n     *         v: 28,\\n     *         r: '0x487s...67bb',\\n     *         s: '0x12ad...2366'\\n     *     }],\\n     *     revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992'\\n     * }])\\n     *\\n     */\\n    function multiRevokeByDelegation(\\n        MultiDelegatedRevocationRequest[] calldata multiDelegatedRequests\\n    ) external payable;\\n\\n    /**\\n     * @dev Timestamps the specified bytes32 data.\\n     *\\n     * @param data The data to timestamp.\\n     *\\n     * @return The timestamp the data was timestamped with.\\n     */\\n    function timestamp(bytes32 data) external returns (uint64);\\n\\n    /**\\n     * @dev Timestamps the specified multiple bytes32 data.\\n     *\\n     * @param data The data to timestamp.\\n     *\\n     * @return The timestamp the data was timestamped with.\\n     */\\n    function multiTimestamp(bytes32[] calldata data) external returns (uint64);\\n\\n    /**\\n     * @dev Revokes the specified bytes32 data.\\n     *\\n     * @param data The data to timestamp.\\n     *\\n     * @return The timestamp the data was revoked with.\\n     */\\n    function revokeOffchain(bytes32 data) external returns (uint64);\\n\\n    /**\\n     * @dev Revokes the specified multiple bytes32 data.\\n     *\\n     * @param data The data to timestamp.\\n     *\\n     * @return The timestamp the data was revoked with.\\n     */\\n    function multiRevokeOffchain(bytes32[] calldata data) external returns (uint64);\\n\\n    /**\\n     * @dev Returns an existing attestation by UID.\\n     *\\n     * @param uid The UID of the attestation to retrieve.\\n     *\\n     * @return The attestation data members.\\n     */\\n    function getAttestation(bytes32 uid) external view returns (Attestation memory);\\n\\n    /**\\n     * @dev Checks whether an attestation exists.\\n     *\\n     * @param uid The UID of the attestation to retrieve.\\n     *\\n     * @return Whether an attestation exists.\\n     */\\n    function isAttestationValid(bytes32 uid) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the timestamp that the specified data was timestamped with.\\n     *\\n     * @param data The data to query.\\n     *\\n     * @return The timestamp the data was timestamped with.\\n     */\\n    function getTimestamp(bytes32 data) external view returns (uint64);\\n\\n    /**\\n     * @dev Returns the timestamp that the specified data was timestamped with.\\n     *\\n     * @param data The data to query.\\n     *\\n     * @return The timestamp the data was timestamped with.\\n     */\\n    function getRevokeOffchain(address revoker, bytes32 data) external view returns (uint64);\\n}\\n\",\"keccak256\":\"0xd530be686226f3c8d7b02bb59797901620f64749a02228539afc8b082a1ee036\",\"license\":\"MIT\"},\"@ethereum-attestation-service/eas-contracts/contracts/ISchemaRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { ISchemaResolver } from \\\"./resolver/ISchemaResolver.sol\\\";\\n\\n/**\\n * @title A struct representing a record for a submitted schema.\\n */\\nstruct SchemaRecord {\\n    bytes32 uid; // The unique identifier of the schema.\\n    ISchemaResolver resolver; // Optional schema resolver.\\n    bool revocable; // Whether the schema allows revocations explicitly.\\n    string schema; // Custom specification of the schema (e.g., an ABI).\\n}\\n\\n/**\\n * @title The global schema registry interface.\\n */\\ninterface ISchemaRegistry {\\n    /**\\n     * @dev Emitted when a new schema has been registered\\n     *\\n     * @param uid The schema UID.\\n     * @param registerer The address of the account used to register the schema.\\n     */\\n    event Registered(bytes32 indexed uid, address registerer);\\n\\n    /**\\n     * @dev Submits and reserves a new schema\\n     *\\n     * @param schema The schema data schema.\\n     * @param resolver An optional schema resolver.\\n     * @param revocable Whether the schema allows revocations explicitly.\\n     *\\n     * @return The UID of the new schema.\\n     */\\n    function register(string calldata schema, ISchemaResolver resolver, bool revocable) external returns (bytes32);\\n\\n    /**\\n     * @dev Returns an existing schema by UID\\n     *\\n     * @param uid The UID of the schema to retrieve.\\n     *\\n     * @return The schema data members.\\n     */\\n    function getSchema(bytes32 uid) external view returns (SchemaRecord memory);\\n}\\n\",\"keccak256\":\"0xef47e449dd02bd034e26b1dea505ce533906f8462fc674c938ed0e872a68d640\",\"license\":\"MIT\"},\"@ethereum-attestation-service/eas-contracts/contracts/Semver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport { Strings } from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\n/**\\n * @dev A simple contract for managing contract versions.\\n */\\ncontract Semver {\\n    // Contract's major version number.\\n    uint256 private immutable _major;\\n\\n    // Contract's minor version number.\\n    uint256 private immutable _minor;\\n\\n    // Contract's patch version number.\\n    uint256 private immutable _path;\\n\\n    /**\\n     * @param major Major version number.\\n     * @param minor Minor version number.\\n     * @param patch Patch version number.\\n     */\\n    constructor(uint256 major, uint256 minor, uint256 patch) {\\n        _major = major;\\n        _minor = minor;\\n        _path = patch;\\n    }\\n\\n    /**\\n     * @notice Returns the full semver contract version.\\n     *\\n     * @return Semver contract version as a string.\\n     */\\n    function version() external view returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(Strings.toString(_major), \\\".\\\", Strings.toString(_minor), \\\".\\\", Strings.toString(_path))\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0xdd3bfff2af5b5cea194f5a771080d13ad458040825b148e0d7eb65f6e3a2a7c7\",\"license\":\"MIT\"},\"@ethereum-attestation-service/eas-contracts/contracts/resolver/ISchemaResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { Attestation } from \\\"../Common.sol\\\";\\n\\n/**\\n * @title The interface of an optional schema resolver.\\n */\\ninterface ISchemaResolver {\\n    /**\\n     * @dev Returns whether the resolver supports ETH transfers.\\n     */\\n    function isPayable() external pure returns (bool);\\n\\n    /**\\n     * @dev Processes an attestation and verifies whether it's valid.\\n     *\\n     * @param attestation The new attestation.\\n     *\\n     * @return Whether the attestation is valid.\\n     */\\n    function attest(Attestation calldata attestation) external payable returns (bool);\\n\\n    /**\\n     * @dev Processes multiple attestations and verifies whether they are valid.\\n     *\\n     * @param attestations The new attestations.\\n     * @param values Explicit ETH amounts which were sent with each attestation.\\n     *\\n     * @return Whether all the attestations are valid.\\n     */\\n    function multiAttest(\\n        Attestation[] calldata attestations,\\n        uint256[] calldata values\\n    ) external payable returns (bool);\\n\\n    /**\\n     * @dev Processes an attestation revocation and verifies if it can be revoked.\\n     *\\n     * @param attestation The existing attestation to be revoked.\\n     *\\n     * @return Whether the attestation can be revoked.\\n     */\\n    function revoke(Attestation calldata attestation) external payable returns (bool);\\n\\n    /**\\n     * @dev Processes revocation of multiple attestation and verifies they can be revoked.\\n     *\\n     * @param attestations The existing attestations to be revoked.\\n     * @param values Explicit ETH amounts which were sent with each revocation.\\n     *\\n     * @return Whether the attestations can be revoked.\\n     */\\n    function multiRevoke(\\n        Attestation[] calldata attestations,\\n        uint256[] calldata values\\n    ) external payable returns (bool);\\n}\\n\",\"keccak256\":\"0xc628c6540da258f76192eaa34c21699c9cbcc4a4029d7ee04e88dc9c18c981fd\",\"license\":\"MIT\"},\"@ethereum-attestation-service/eas-contracts/contracts/resolver/SchemaResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport { IEAS, Attestation } from \\\"../IEAS.sol\\\";\\nimport { InvalidEAS, uncheckedInc } from \\\"../Common.sol\\\";\\nimport { Semver } from \\\"../Semver.sol\\\";\\n\\nimport { ISchemaResolver } from \\\"./ISchemaResolver.sol\\\";\\n\\n/**\\n * @title A base resolver contract\\n */\\nabstract contract SchemaResolver is ISchemaResolver, Semver {\\n    error AccessDenied();\\n    error InsufficientValue();\\n    error NotPayable();\\n\\n    // The global EAS contract.\\n    IEAS internal immutable _eas;\\n\\n    /**\\n     * @dev Creates a new resolver.\\n     *\\n     * @param eas The address of the global EAS contract.\\n     */\\n    constructor(IEAS eas) Semver(1, 0, 0) {\\n        if (address(eas) == address(0)) {\\n            revert InvalidEAS();\\n        }\\n\\n        _eas = eas;\\n    }\\n\\n    /**\\n     * @dev Ensures that only the EAS contract can make this call.\\n     */\\n    modifier onlyEAS() {\\n        _onlyEAS();\\n\\n        _;\\n    }\\n\\n    /**\\n     * @inheritdoc ISchemaResolver\\n     */\\n    function isPayable() public pure virtual returns (bool) {\\n        return false;\\n    }\\n\\n    /**\\n     * @dev ETH callback.\\n     */\\n    receive() external payable virtual {\\n        if (!isPayable()) {\\n            revert NotPayable();\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc ISchemaResolver\\n     */\\n    function attest(Attestation calldata attestation) external payable onlyEAS returns (bool) {\\n        return onAttest(attestation, msg.value);\\n    }\\n\\n    /**\\n     * @inheritdoc ISchemaResolver\\n     */\\n    function multiAttest(\\n        Attestation[] calldata attestations,\\n        uint256[] calldata values\\n    ) external payable onlyEAS returns (bool) {\\n        uint256 length = attestations.length;\\n\\n        // We are keeping track of the remaining ETH amount that can be sent to resolvers and will keep deducting\\n        // from it to verify that there isn't any attempt to send too much ETH to resolvers. Please note that unless\\n        // some ETH was stuck in the contract by accident (which shouldn't happen in normal conditions), it won't be\\n        // possible to send too much ETH anyway.\\n        uint256 remainingValue = msg.value;\\n\\n        for (uint256 i = 0; i < length; i = uncheckedInc(i)) {\\n            // Ensure that the attester/revoker doesn't try to spend more than available.\\n            uint256 value = values[i];\\n            if (value > remainingValue) {\\n                revert InsufficientValue();\\n            }\\n\\n            // Forward the attestation to the underlying resolver and revert in case it isn't approved.\\n            if (!onAttest(attestations[i], value)) {\\n                return false;\\n            }\\n\\n            unchecked {\\n                // Subtract the ETH amount, that was provided to this attestation, from the global remaining ETH amount.\\n                remainingValue -= value;\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @inheritdoc ISchemaResolver\\n     */\\n    function revoke(Attestation calldata attestation) external payable onlyEAS returns (bool) {\\n        return onRevoke(attestation, msg.value);\\n    }\\n\\n    /**\\n     * @inheritdoc ISchemaResolver\\n     */\\n    function multiRevoke(\\n        Attestation[] calldata attestations,\\n        uint256[] calldata values\\n    ) external payable onlyEAS returns (bool) {\\n        uint256 length = attestations.length;\\n\\n        // We are keeping track of the remaining ETH amount that can be sent to resolvers and will keep deducting\\n        // from it to verify that there isn't any attempt to send too much ETH to resolvers. Please note that unless\\n        // some ETH was stuck in the contract by accident (which shouldn't happen in normal conditions), it won't be\\n        // possible to send too much ETH anyway.\\n        uint256 remainingValue = msg.value;\\n\\n        for (uint256 i = 0; i < length; i = uncheckedInc(i)) {\\n            // Ensure that the attester/revoker doesn't try to spend more than available.\\n            uint256 value = values[i];\\n            if (value > remainingValue) {\\n                revert InsufficientValue();\\n            }\\n\\n            // Forward the revocation to the underlying resolver and revert in case it isn't approved.\\n            if (!onRevoke(attestations[i], value)) {\\n                return false;\\n            }\\n\\n            unchecked {\\n                // Subtract the ETH amount, that was provided to this attestation, from the global remaining ETH amount.\\n                remainingValue -= value;\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev A resolver callback that should be implemented by child contracts.\\n     *\\n     * @param attestation The new attestation.\\n     * @param value An explicit ETH amount that was sent to the resolver. Please note that this value is verified in\\n     * both attest() and multiAttest() callbacks EAS-only callbacks and that in case of multi attestations, it'll\\n     * usually hold that msg.value != value, since msg.value aggregated the sent ETH amounts for all the attestations\\n     * in the batch.\\n     *\\n     * @return Whether the attestation is valid.\\n     */\\n    function onAttest(Attestation calldata attestation, uint256 value) internal virtual returns (bool);\\n\\n    /**\\n     * @dev Processes an attestation revocation and verifies if it can be revoked.\\n     *\\n     * @param attestation The existing attestation to be revoked.\\n     * @param value An explicit ETH amount that was sent to the resolver. Please note that this value is verified in\\n     * both revoke() and multiRevoke() callbacks EAS-only callbacks and that in case of multi attestations, it'll\\n     * usually hold that msg.value != value, since msg.value aggregated the sent ETH amounts for all the attestations\\n     * in the batch.\\n     *\\n     * @return Whether the attestation can be revoked.\\n     */\\n    function onRevoke(Attestation calldata attestation, uint256 value) internal virtual returns (bool);\\n\\n    /**\\n     * @dev Ensures that only the EAS contract can make this call.\\n     */\\n    function _onlyEAS() private view {\\n        if (msg.sender != address(_eas)) {\\n            revert AccessDenied();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8bac9997f3c6b2e9a165342e35c1263d1942ce55a98ecbe0aa6ec84fcb6538d7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0-rc.1) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any (single) token transfer. This includes minting and burning.\\n     * See {_beforeConsecutiveTokenTransfer}.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any (single) transfer of tokens. This includes minting and burning.\\n     * See {_afterConsecutiveTokenTransfer}.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called before consecutive token transfers.\\n     * Calling conditions are similar to {_beforeTokenTransfer}.\\n     *\\n     * The default implementation include balances updates that extensions such as {ERC721Consecutive} cannot perform\\n     * directly.\\n     */\\n    function _beforeConsecutiveTokenTransfer(\\n        address from,\\n        address to,\\n        uint256, /*first*/\\n        uint96 size\\n    ) internal virtual {\\n        if (from != address(0)) {\\n            _balances[from] -= size;\\n        }\\n        if (to != address(0)) {\\n            _balances[to] += size;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called after consecutive token transfers.\\n     * Calling conditions are similar to {_afterTokenTransfer}.\\n     */\\n    function _afterConsecutiveTokenTransfer(\\n        address, /*from*/\\n        address, /*to*/\\n        uint256, /*first*/\\n        uint96 /*size*/\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x3e266133b3e0c5467be3b32fe1209e328d0a76d20fa0a8f51a42750ee311cb47\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0-rc.1) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed92e1ac2e70d4f62c1dbbe744a836836655f2620a73cf620fa5e9a0faacdd5d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_burn}. This override additionally checks to see if a\\n     * token-specific URI was set for the token, and if so, it deletes the token URI from\\n     * the storage mapping.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5c3501c1b70fcfc64417e9da5cc6a3597191baa354781e508e1e14cc0e50a038\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0-rc.1) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x00a52ed7a22e00736be86073cfaf7ade4b6e6d3e50165435139225daf7c2f284\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0-rc.1) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0x80585acee29868ec9adf36c50a55e8bbf73345c4a2c8e3a5e7ef5b35acd450cf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0-rc.1) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3bb3b1d1326c36513682f214a6fe455732e9cd293787e035a714427fe4079b91\",\"license\":\"MIT\"},\"base64-sol/base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides functions for encoding/decoding base64\\nlibrary Base64 {\\n    string internal constant TABLE_ENCODE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n    bytes  internal constant TABLE_DECODE = hex\\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\n                                            hex\\\"00000000000000000000003e0000003f3435363738393a3b3c3d000000000000\\\"\\n                                            hex\\\"00000102030405060708090a0b0c0d0e0f101112131415161718190000000000\\\"\\n                                            hex\\\"001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132330000000000\\\";\\n\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return '';\\n\\n        // load the table into memory\\n        string memory table = TABLE_ENCODE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 3 bytes at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n                // read 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // write 4 characters\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr( 6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(        input,  0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n            }\\n\\n            // padding with '='\\n            switch mod(mload(data), 3)\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\n        }\\n\\n        return result;\\n    }\\n\\n    function decode(string memory _data) internal pure returns (bytes memory) {\\n        bytes memory data = bytes(_data);\\n\\n        if (data.length == 0) return new bytes(0);\\n        require(data.length % 4 == 0, \\\"invalid base64 decoder input\\\");\\n\\n        // load the table into memory\\n        bytes memory table = TABLE_DECODE;\\n\\n        // every 4 characters represent 3 bytes\\n        uint256 decodedLen = (data.length / 4) * 3;\\n\\n        // add some extra buffer at the end required for the writing\\n        bytes memory result = new bytes(decodedLen + 32);\\n\\n        assembly {\\n            // padding with '='\\n            let lastBytes := mload(add(data, mload(data)))\\n            if eq(and(lastBytes, 0xFF), 0x3d) {\\n                decodedLen := sub(decodedLen, 1)\\n                if eq(and(lastBytes, 0xFFFF), 0x3d3d) {\\n                    decodedLen := sub(decodedLen, 1)\\n                }\\n            }\\n\\n            // set the actual output length\\n            mstore(result, decodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 4 characters at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n               // read 4 characters\\n               dataPtr := add(dataPtr, 4)\\n               let input := mload(dataPtr)\\n\\n               // write 3 bytes\\n               let output := add(\\n                   add(\\n                       shl(18, and(mload(add(tablePtr, and(shr(24, input), 0xFF))), 0xFF)),\\n                       shl(12, and(mload(add(tablePtr, and(shr(16, input), 0xFF))), 0xFF))),\\n                   add(\\n                       shl( 6, and(mload(add(tablePtr, and(shr( 8, input), 0xFF))), 0xFF)),\\n                               and(mload(add(tablePtr, and(        input , 0xFF))), 0xFF)\\n                    )\\n                )\\n                mstore(resultPtr, shl(232, output))\\n                resultPtr := add(resultPtr, 3)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xa73959e6ef0b693e4423a562e612370160b934a75e618361ddd8c9c4b8ddbaaf\",\"license\":\"MIT\"},\"contracts/dynamic-nft/DevNFTRenderer.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\nimport \\\"base64-sol/base64.sol\\\";\\nimport \\\"./DevSchemaResolver.sol\\\";\\nimport \\\"./GithubLinkResolver.sol\\\";\\nimport \\\"./NFTRenderer.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\ncontract DevNFTRenderer is NFTRenderer {\\n  uint256 public nftCounter;\\n  DevSchemaResolver public schemaResolver;\\n  GithubLinkResolver public githubResolver;\\n  address public _owner;\\n\\n  constructor (address payable _schemaResolver, address payable _githubResolver) {\\n    nftCounter = 0;\\n    schemaResolver = DevSchemaResolver(_schemaResolver);\\n    githubResolver = GithubLinkResolver(_githubResolver);\\n    _owner = msg.sender;\\n  }\\n  \\n  function isEligibleToMint(address tokenOwner, string memory repository) public view returns (bool) {\\n    (uint256 totalAttestations, ) = getAttestationCountAndData(tokenOwner, repository);\\n    return (totalAttestations > 0);\\n  }\\n\\n  function formatTokenURI(address tokenOwner, string memory nftName, string memory repository, uint256 tokenId) public view returns (string memory) {\\n     (,  DevSchemaResolver.AttestationData[] memory attestations) = getAttestationCountAndData(tokenOwner, repository);\\n      string memory contributor = getGithubUsername(tokenOwner);\\n      string memory svgImageURI = imageURI(tokenOwner, repository);\\n      string memory encodedNftName = string(abi.encodePacked(nftName, \\\" #\\\", Strings.toString(tokenId * 1)));\\n      string memory encodedDescription = string(abi.encodePacked(\\\"https://github.com/\\\",repository, \\\": Contributions of \\\",  contributor, \\\" - powered by Karma (www.karmahq.xyz)\\\"));\\n\\n      string memory json = string(\\n        abi.encodePacked(\\n          '{\\\"name\\\":\\\"',encodedNftName,'\\\", \\\"description\\\":\\\"',encodedDescription,'\\\", \\\"attributes\\\":\\\"\\\" , \\\"image\\\":\\\"',\\n          svgImageURI,\\n          '\\\"}'\\n        )\\n      );\\n\\n      string memory base64EncodedJson = Base64.encode(bytes(json));\\n      return string(abi.encodePacked(\\\"data:application/json;base64,\\\", base64EncodedJson));\\n  }\\n\\n  function getAttributes(DevSchemaResolver.AttestationData[] memory attestations) private pure returns (string memory) {\\n    string memory attributesJson = '['; \\n      for (uint256 i = 0; i < attestations.length; i++) {\\n\\n        string memory attestationJson = string(\\n          abi.encodePacked(\\n              '{\\\"attestation_uid\\\":\\\"', attestations[i].uid, '\\\",\\\"pr_link\\\":\\\"', attestations[i].prUrl, '\\\" }'\\n          )\\n        );\\n\\n        if (i < attestations.length - 1) {\\n          attestationJson = string(abi.encodePacked(attestationJson, ','));\\n        }\\n\\n        attributesJson = string(abi.encodePacked(attributesJson, attestationJson));\\n      }\\n\\n    attributesJson = string(abi.encodePacked(attributesJson, ']'));\\n    return attributesJson;\\n  }\\n\\n  function getGithubUsername(address receiver) private view returns (string memory){\\n    return githubResolver.getUsernameOfAddress(receiver);\\n  }\\n\\n    \\n  function getAttestationCountAndData(address tokenOwner, string memory repository) private view returns (uint256, DevSchemaResolver.AttestationData[] memory) {\\n      string memory githubUsername = getGithubUsername(tokenOwner);\\n      DevSchemaResolver.AttestationData[] memory attestations = schemaResolver.getUserAttestation(repository, githubUsername);\\n      require(bytes(githubUsername).length > 0, \\\"User doesn't have any contributions\\\");\\n      return (attestations.length, attestations);\\n  }\\n\\n  function imageURI(address tokenOwner, string memory repository) public view returns(string memory) {\\n    string memory username = getGithubUsername(tokenOwner);\\n    (uint256 prCount,) = getAttestationCountAndData(tokenOwner, repository);\\n    \\n    string memory background = generateBackground(prCount);\\n    string memory avatar = generateAvatar(prCount);\\n    string memory avatarChain = generateAvatarChain(prCount);\\n    string memory card = generateCard(username, prCount, repository);\\n\\n    string memory completeSVG = string(abi.encodePacked(\\n      'data:image/svg+xml;utf8, <svg width=\\\"1000\\\" height=\\\"1000\\\" viewBox=\\\"0 0 1000 1000\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\">',\\n      background,\\n      card,\\n      avatarChain,\\n      avatar,\\n      '</svg>'\\n    ));\\n    return completeSVG;\\n  }\\n\\n\\n  function getColor(string memory colorType, uint256 position) private pure returns (string memory color) {\\n      string memory colorAux;\\n      bytes32 colorTypeHash = keccak256(bytes(colorType));\\n      uint256 preventPosition = position < 1 ? 1 : position;\\n      string memory convertedPosition = Strings.toString((255 - (preventPosition * 50))); // Use Strings.toString() for integer to string conversion\\n\\n      if (colorTypeHash == keccak256(\\\"green\\\")) {\\n          colorAux = [\\\"250, 237, 237\\\", \\\"242, 237, 250\\\", \\\"237, 250, 240\\\", \\\"250, 237, 243\\\"][preventPosition];\\n      } else if (colorTypeHash == keccak256(\\\"yellow\\\")) {\\n          colorAux = string(abi.encodePacked(\\\"241,255,\\\", convertedPosition));\\n      } else if (colorTypeHash == keccak256(\\\"white\\\")) {\\n          colorAux = string(abi.encodePacked(\\\"255,255,\\\", convertedPosition));\\n      } else if (colorTypeHash == keccak256(\\\"blue\\\")) {\\n          colorAux = string(abi.encodePacked(\\\"0,0,\\\", convertedPosition));\\n      }\\n\\n      color = string(abi.encodePacked(\\\"rgb(\\\", colorAux, \\\")\\\"));\\n  }\\n\\n  function getPosition(uint256 score, uint256 interval) private pure  returns (uint256 position) {\\n    if (score < interval) {\\n      position = 0;\\n    } else if(score > interval && score < interval * 2) {\\n      position = 1;\\n    } else if(score > interval * 2 && score < interval + 3) {\\n      position = 2;\\n    } else {\\n      position = 3;\\n    }\\n  }\\n \\n  function generateBackground(uint256 prCount) public pure returns (string memory svg) {\\n    string memory color = getColor(\\\"green\\\", getPosition(prCount , 4));\\n     svg = string(\\n      abi.encodePacked('<rect width=\\\"1000\\\" height=\\\"1000\\\" fill=\\\"', color, '\\\" />'));    \\n  }\\n\\n  function generateCard(\\n    string memory username,\\n    uint256 prCount,\\n    string memory repository\\n  ) public pure returns (string memory svg) {\\n  string memory convertedPrCount = Strings.toString(prCount * 1);\\n  \\n  svg = string(\\n    abi.encodePacked(\\n      '<rect x=\\\"42\\\" y=\\\"728\\\" width=\\\"932\\\" height=\\\"246\\\" rx=\\\"24\\\" fill=\\\"rgb(38,26,59)\\\"/>',\\n      '<text fill=\\\"white\\\" font-family=\\\"Fira Code\\\" font-size=\\\"32\\\" x=\\\"253\\\" y=\\\"776\\\">',\\n      '<tspan dx=\\\"60\\\" dy=\\\"15\\\">Contributor:</tspan><tspan dx=\\\"20\\\" fill=\\\"rgb(246,112,199)\\\">', username ,'</tspan>',\\n      '<tspan x=\\\"255\\\" dy=\\\"45\\\">Total no. of PRs:</tspan> <tspan dx=\\\"20\\\" fill=\\\"rgb(153,246,224)\\\">', convertedPrCount ,'</tspan>',\\n      '<tspan x=\\\"325\\\" dy=\\\"45\\\">Repository:</tspan><tspan dx=\\\"20\\\" fill=\\\"rgb(221,214,254)\\\">', repository ,'</tspan>', \\n      '</text>'\\n      )\\n    );\\n  } \\n\\n  function generateAvatar(uint256 prCount) public pure returns (string memory svg) {\\n    string memory bearColor = getColor(\\\"white\\\", getPosition(prCount , 3));\\n    string memory bearBorder = getColor(\\\"blue\\\", getPosition(prCount , 2));\\n\\n    svg = string(\\n      abi.encodePacked(\\n        '<path d=\\\"m201.25 524.9v-241.07h17.735v-122.83h31.53v-37.442h68.315v31.53h31.529v40.726h206.92v-18.393h11.166v-30.216h109.04v30.216h34.814v63.06h-34.814v31.53h34.814v247.64h-53.206v32.844h-30.873v42.696h-346.17v-35.471h-31.53v-34.814h-49.265z\\\" fill=\\\"', bearColor , '\\\"/>',\\n        '<rect x=\\\"318.82\\\" y=\\\"375.79\\\" width=\\\"236.47\\\" height=\\\"69.628\\\" fill=\\\"rgb(234, 236, 245)\\\"/>',\\n        '<rect x=\\\"352.98\\\" y=\\\"409.95\\\" width=\\\"170.79\\\" height=\\\"69.628\\\" fill=\\\"rgb(234, 236, 245)\\\"/>',\\n        '<rect x=\\\"387.14\\\" y=\\\"442.8\\\" width=\\\"102.47\\\" height=\\\"69.628\\\" fill=\\\"rgb(234, 236, 245)\\\"/>',\\n        '<rect x=\\\"218.98\\\" y=\\\"240.48\\\" width=\\\"31.481\\\" height=\\\"31.481\\\" fill=\\\"', bearBorder , '\\\"/>',\\n        '<rect x=\\\"218.98\\\" y=\\\"147.2\\\" width=\\\"31.481\\\" height=\\\"31.481\\\" fill=\\\"', bearBorder , '\\\"/>',\\n        '<rect x=\\\"318.83\\\" y=\\\"147.2\\\" width=\\\"31.481\\\" height=\\\"31.481\\\" fill=\\\"', bearBorder , '\\\"/>',\\n        '<rect x=\\\"187.45\\\" y=\\\"177.42\\\" width=\\\"31.53\\\" height=\\\"63.06\\\" fill=\\\"', bearBorder , '\\\"/>',\\n        '<rect x=\\\"287.3\\\" y=\\\"177.42\\\" width=\\\"31.53\\\" height=\\\"63.06\\\" fill=\\\"', bearBorder , '\\\"/>',\\n        '<rect x=\\\"250.51\\\" y=\\\"208.95\\\" width=\\\"68.315\\\" height=\\\"31.53\\\" fill=\\\"', bearBorder , '\\\"/>',\\n        '<rect x=\\\"387.14\\\" y=\\\"411.26\\\" width=\\\"68.315\\\" height=\\\"31.53\\\" fill=\\\"', bearBorder , '\\\"/>',\\n        '<rect x=\\\"421.3\\\" y=\\\"411.26\\\" width=\\\"68.315\\\" height=\\\"31.53\\\" fill=\\\"', bearBorder , '\\\"/>',\\n        '<rect transform=\\\"rotate(-90 318.83 411.26)\\\" x=\\\"318.83\\\" y=\\\"411.26\\\" width=\\\"68.315\\\" height=\\\"31.53\\\" fill=\\\"', bearBorder , '\\\"/>',\\n        '<rect transform=\\\"rotate(-90 523.77 411.26)\\\" x=\\\"523.77\\\" y=\\\"411.26\\\" width=\\\"68.315\\\" height=\\\"31.53\\\" fill=\\\"', bearBorder , '\\\"/>',\\n        '<rect transform=\\\"rotate(-90 422.61 479.58)\\\" x=\\\"422.61\\\" y=\\\"479.58\\\" width=\\\"68.315\\\" height=\\\"31.53\\\" fill=\\\"', bearBorder , '\\\"/>',\\n        '<rect x=\\\"350.36\\\" y=\\\"177.42\\\" width=\\\"210.2\\\" height=\\\"31.53\\\" fill=\\\"', bearBorder , '\\\"/>',\\n        '<rect x=\\\"280.73\\\" y=\\\"571.54\\\" width=\\\"214.14\\\" height=\\\"31.53\\\" fill=\\\"', bearBorder , '\\\"/>',\\n        '<rect x=\\\"250.51\\\" y=\\\"115.67\\\" width=\\\"68.315\\\" height=\\\"31.53\\\" fill=\\\"', bearBorder , '\\\"/>',\\n        '<rect x=\\\"218.98\\\" y=\\\"508.48\\\" width=\\\"31.481\\\" height=\\\"31.481\\\" fill=\\\"', bearBorder , '\\\"/>',\\n        '<rect x=\\\"250.51\\\" y=\\\"540.01\\\" width=\\\"31.481\\\" height=\\\"31.481\\\" fill=\\\"', bearBorder , '\\\"/>',\\n        '<rect x=\\\"187.45\\\" y=\\\"272.01\\\" width=\\\"31.53\\\" height=\\\"268\\\" fill=\\\"', bearBorder , '\\\"/>',\\n        '<rect transform=\\\"matrix(-1 0 0 1 690.61 240.48)\\\" width=\\\"31.481\\\" height=\\\"31.481\\\" fill=\\\"', bearBorder , '\\\"/>',\\n        '<rect transform=\\\"matrix(-1 0 0 1 690.61 147.2)\\\" width=\\\"31.481\\\" height=\\\"31.481\\\" fill=\\\"', bearBorder , '\\\"/>',\\n        '<rect transform=\\\"matrix(-1 0 0 1 590.77 147.2)\\\" width=\\\"31.481\\\" height=\\\"31.481\\\" fill=\\\"', bearBorder , '\\\"/>',\\n        '<rect transform=\\\"matrix(-1 0 0 1 722.14 177.42)\\\" width=\\\"31.53\\\" height=\\\"63.06\\\" fill=\\\"', bearBorder , '\\\"/>',\\n        '<rect transform=\\\"matrix(-1 0 0 1 622.3 177.42)\\\" width=\\\"31.53\\\" height=\\\"63.06\\\" fill=\\\"', bearBorder , '\\\"/>',\\n        '<rect transform=\\\"matrix(-1 0 0 1 659.08 208.95)\\\" width=\\\"68.315\\\" height=\\\"31.53\\\" fill=\\\"', bearBorder , '\\\"/>',\\n        '<rect transform=\\\"matrix(-1 0 0 1 559.24 177.42)\\\" width=\\\"210.2\\\" height=\\\"31.53\\\" fill=\\\"', bearBorder , '\\\"/>',\\n        '<rect transform=\\\"matrix(-1 0 0 1 628.87 571.54)\\\" width=\\\"214.14\\\" height=\\\"31.53\\\" fill=\\\"', bearBorder , '\\\"/>',\\n        '<rect transform=\\\"matrix(-1 0 0 1 659.08 115.67)\\\" width=\\\"68.315\\\" height=\\\"31.53\\\" fill=\\\"', bearBorder , '\\\"/>',\\n        '<rect transform=\\\"matrix(-1 0 0 1 690.61 508.48)\\\" width=\\\"31.481\\\" height=\\\"31.481\\\" fill=\\\"', bearBorder , '\\\"/>',\\n        '<rect transform=\\\"matrix(-1 0 0 1 659.08 540.01)\\\" width=\\\"31.481\\\" height=\\\"31.481\\\" fill=\\\"', bearBorder , '\\\"/>',\\n        '<rect transform=\\\"matrix(-1 0 0 1 722.14 272.01)\\\" width=\\\"31.53\\\" height=\\\"268\\\" fill=\\\"', bearBorder , '\\\"/>',\\n        '<rect x=\\\"250.51\\\" y=\\\"240.48\\\" width=\\\"68.315\\\" height=\\\"31.53\\\" fill=\\\"rgb(213, 217, 235)\\\"/>',\\n        '<rect x=\\\"250.51\\\" y=\\\"508.48\\\" width=\\\"31.481\\\" height=\\\"31.481\\\" fill=\\\"rgb(213, 217, 235)\\\"/>',\\n        '<rect x=\\\"218.98\\\" y=\\\"208.95\\\" width=\\\"31.481\\\" height=\\\"31.481\\\" fill=\\\"rgb(213, 217, 235)\\\"/>',\\n        '<rect x=\\\"282.04\\\" y=\\\"540.01\\\" width=\\\"345.51\\\" height=\\\"31.53\\\" fill=\\\"rgb(213, 217, 235)\\\"/>',\\n        '<rect transform=\\\"matrix(1 0 0 -1 627.56 303.54)\\\" width=\\\"31.53\\\" height=\\\"63.06\\\" fill=\\\"rgb(213, 217, 235)\\\"/>',\\n        '<rect transform=\\\"matrix(1 0 0 -1 659.08 240.48)\\\" width=\\\"31.53\\\" height=\\\"63.06\\\" fill=\\\"rgb(213, 217, 235)\\\"/>',\\n        '<rect transform=\\\"matrix(1 0 0 -1 590.77 272.01)\\\" width=\\\"68.315\\\" height=\\\"31.53\\\" fill=\\\"rgb(213, 217, 235)\\\"/>',\\n        '<rect transform=\\\"matrix(-1 0 0 1 659.04 508.48)\\\" width=\\\"31.481\\\" height=\\\"31.481\\\" fill=\\\"rgb(213, 217, 235)\\\"/>',\\n        '<rect transform=\\\"matrix(-1 0 0 1 690.61 272.01)\\\" width=\\\"31.53\\\" height=\\\"236.47\\\" fill=\\\"rgb(213, 217, 235)\\\"/>'\\n      )\\n    );\\n  }\\n\\n  function generateAvatarChain(uint256 prCount) public pure returns (string memory svg) {\\n    string memory color = getColor(\\\"yellow\\\", getPosition(prCount , 2));\\n    svg = string(\\n      abi.encodePacked(\\n        '<path d=\\\"m506.99 603.15h21.775v21.775h-21.774v21.773h-21.775v-21.774h21.774v-21.774zm-104.52 0h-21.774v21.775h21.774v-21.775zm0 21.774h21.774v21.774h-21.774v-21.774z\\\" clip-rule=\\\"evenodd\\\" fill=\\\"', color, '\\\" fill-rule=\\\"evenodd\\\"/>',\\n        '<rect transform=\\\"rotate(-90 422.08 690.24)\\\" x=\\\"422.08\\\" y=\\\"690.24\\\" width=\\\"65.323\\\" height=\\\"21.774\\\" fill=\\\"', color, '\\\" />',\\n        '<rect transform=\\\"rotate(-90 465.62 690.24)\\\" x=\\\"465.62\\\" y=\\\"690.24\\\" width=\\\"65.323\\\" height=\\\"21.774\\\" fill=\\\"', color, '\\\" />',\\n        '<rect x=\\\"422.08\\\" y=\\\"624.92\\\" width=\\\"65.323\\\" height=\\\"21.774\\\" fill=\\\"', color, '\\\" />',\\n        '<rect x=\\\"422.08\\\" y=\\\"668.47\\\" width=\\\"65.323\\\" height=\\\"21.774\\\" fill=\\\"', color, '\\\" />',\\n        '<rect x=\\\"443.85\\\" y=\\\"712.02\\\" width=\\\"43.548\\\" height=\\\"21.774\\\" fill=\\\"', color, '\\\" />',\\n        '<rect x=\\\"443.85\\\" y=\\\"733.79\\\" width=\\\"43.548\\\" height=\\\"21.774\\\" fill=\\\"', color, '\\\" />',\\n        '<rect transform=\\\"rotate(-90 443.85 755.57)\\\" x=\\\"443.85\\\" y=\\\"755.57\\\" width=\\\"65.323\\\" height=\\\"21.774\\\" fill=\\\"', color, '\\\" />'\\n      )\\n    ); \\n  }\\n\\n} \\n\",\"keccak256\":\"0xa8b9eb4bc57edea255ed34da233f1e936b03373ab9bd452ed0542b4f0314b03a\",\"license\":\"MIT\"},\"contracts/dynamic-nft/DevSchemaResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport {SchemaResolver} from \\\"@ethereum-attestation-service/eas-contracts/contracts/resolver/SchemaResolver.sol\\\";\\nimport {IEAS} from \\\"@ethereum-attestation-service/eas-contracts/contracts/IEAS.sol\\\";\\nimport {Attestation} from \\\"@ethereum-attestation-service/eas-contracts/contracts/Common.sol\\\";\\n\\n// errors\\nerror NotOwner();\\n\\ncontract DevSchemaResolver is SchemaResolver {\\n\\n    struct AttestationData {\\n        bytes32 uid;\\n        string prUrl;\\n    }\\n\\n    // username => repoName = attestation\\n    mapping(string => mapping(string => AttestationData[])) public devAttestations;\\n    address public _owner;\\n\\n    constructor(IEAS eas) SchemaResolver(eas) {\\n        _owner = msg.sender;\\n    }\\n\\n    /**\\n    * Decodes the schema\\n    */\\n    function decode(bytes memory data)\\n        public\\n        pure\\n        returns (string memory username, string memory repository, string memory pullrequestUrl,  uint256 pullRequestCount)\\n    {\\n        (username, repository, , , pullrequestUrl , pullRequestCount) = abi.decode(data, (string, string, string, string, string, uint256));\\n        return (username, repository, pullrequestUrl, pullRequestCount);\\n    }\\n\\n\\n    /**\\n     * This is an bottom up event, called from the attest contract\\n     */\\n    function onAttest(\\n        Attestation calldata attestation,\\n        uint256 /*value*/\\n    ) internal override returns (bool) {\\n        (string memory username, string memory repository, string memory pullrequestUrl,) = decode(attestation.data);\\n        AttestationData memory newAttestation = AttestationData({\\n            uid: attestation.uid,\\n            prUrl: pullrequestUrl\\n        });\\n        devAttestations[username][repository].push(newAttestation);\\n        return true;\\n    }\\n\\n    /**\\n     * This is an bottom up event, called from the attest contract\\n     */\\n    function onRevoke(\\n        Attestation calldata attestation,\\n        uint256 /*value*/\\n    ) internal override returns (bool) {\\n       (string memory username, string memory repository, ,) = decode(attestation.data);\\n        AttestationData[] storage attestations = devAttestations[username][repository];\\n        for(uint i = 0; i < attestations.length; i++) {\\n            if(attestations[i].uid == attestation.uid) {\\n                attestations[i] = attestations[attestations.length - 1];\\n                attestations.pop();\\n                break;\\n            }\\n        }\\n        devAttestations[username][repository] = attestations;\\n        return true;\\n    }\\n\\n    function getUserAttestation(string memory repoName, string memory username) public view returns (AttestationData[] memory) {\\n        return devAttestations[username][repoName];\\n    }\\n}\\n\",\"keccak256\":\"0x397477b97934a3b8ec5fbe5f616d9cfff76a89e99b9891e6e2a5721a74f57fe9\",\"license\":\"MIT\"},\"contracts/dynamic-nft/GithubLinkResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport {SchemaResolver} from \\\"@ethereum-attestation-service/eas-contracts/contracts/resolver/SchemaResolver.sol\\\";\\nimport {IEAS} from \\\"@ethereum-attestation-service/eas-contracts/contracts/IEAS.sol\\\";\\nimport {Attestation} from \\\"@ethereum-attestation-service/eas-contracts/contracts/Common.sol\\\";\\n\\n\\ncontract GithubLinkResolver is SchemaResolver {\\n    mapping(string => address) public handleToAddress;\\n    mapping(address => string) public addressToHandle;\\n    address public owner;\\n\\n    constructor(IEAS eas) SchemaResolver(eas) {\\n        owner = msg.sender;\\n    }\\n    \\n\\n    /**\\n     * Decodes the schema\\n     */\\n    function decode(bytes memory data)\\n        public\\n        pure\\n        returns (string memory githubHandle)\\n    {\\n        (githubHandle) = abi.decode(data, (string));\\n    }\\n\\n    /**\\n     * This is a bottom-up event, called from the attest contract\\n     */\\n    function onAttest(\\n        Attestation calldata attestation,\\n        uint256 /*value*/\\n    ) internal override returns (bool) {\\n        (string memory githubHandle) = decode(attestation.data);\\n        handleToAddress[githubHandle] = attestation.recipient;\\n        addressToHandle[attestation.recipient] = githubHandle;\\n        return true;\\n    }\\n\\n    /**\\n     * This is a bottom-up event, called from the attest contract\\n     */\\n    function onRevoke(\\n        Attestation calldata attestation,\\n        uint256 /*value*/\\n    ) internal override returns (bool) {\\n        (string memory githubHandle) = decode(attestation.data);\\n        delete handleToAddress[githubHandle]; // Use delete to clear the mapping entry\\n        delete addressToHandle[attestation.recipient]; \\n        \\n        return true;\\n    }\\n\\n    function getAddressOfGithubHandle(string memory githubHandle) public view returns (address) {\\n        return handleToAddress[githubHandle];\\n    }\\n\\n    function getUsernameOfAddress(address publicAddress) public view returns (string memory){\\n        return addressToHandle[publicAddress];\\n    }\\n}\\n\",\"keccak256\":\"0x180c2b4b8c9aa2f46e91009966211af0c966862f228219f9df02abbc9510b9c4\",\"license\":\"MIT\"},\"contracts/dynamic-nft/NFTRenderer.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\ninterface NFTRenderer {\\n  function formatTokenURI(address owner, string memory nftName, string memory metadata, uint256 tokenId) external view returns (string memory);\\n  function imageURI(address tokenOwner, string memory metadata) external view returns(string memory);\\n  function isEligibleToMint(address tokenOwner, string memory metadata)  external view returns (bool);\\n}\\n\",\"keccak256\":\"0xfa6ba946028dc167ee4473e6276b2e868d79d34dc88574f98453c959ca647a82\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5924,
        "contract": "contracts/dynamic-nft/DevNFTRenderer.sol:DevNFTRenderer",
        "label": "nftCounter",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 5927,
        "contract": "contracts/dynamic-nft/DevNFTRenderer.sol:DevNFTRenderer",
        "label": "schemaResolver",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(DevSchemaResolver)6982"
      },
      {
        "astId": 5930,
        "contract": "contracts/dynamic-nft/DevNFTRenderer.sol:DevNFTRenderer",
        "label": "githubResolver",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(GithubLinkResolver)7297"
      },
      {
        "astId": 5932,
        "contract": "contracts/dynamic-nft/DevNFTRenderer.sol:DevNFTRenderer",
        "label": "_owner",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(DevSchemaResolver)6982": {
        "encoding": "inplace",
        "label": "contract DevSchemaResolver",
        "numberOfBytes": "20"
      },
      "t_contract(GithubLinkResolver)7297": {
        "encoding": "inplace",
        "label": "contract GithubLinkResolver",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}